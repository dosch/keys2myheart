#!/usr/bin/python
# -*- coding: utf-8 -*-
##
## (cc) 2015 Luis Rodil-Fernandez <root@derfunke.net>
## Generate labels from revocation certificates and manage printing queue
##
##
CLII = """
Tool for gnupg key management used in the key2myheart installation.

Usage:
  gpgkeypipe generate --name=<name> --email=<email>
  gpgkeypipe revocation [--keyid=<keyid>]
  gpgkeypipe k2myheart --name=<name> --email=<email> --out=<path>
  gpgkeypipe shred
  gpgkeypipe -h | --help

Commands:
  generate              Generate keypair for given name and email address.
  revocation            Get revocation certificate for requested key id.
  shred                 Digitally shred all generated keys and certificates.

Options:
  -h --help             Show this screen.
  --name=<name>         Name of key's owner.
  --email=<email>       Email address of key's owner.
  --keyid=<keyid>       Id of key to generate certificate for.
  --out=<path> 		    Path to store a k2h identity.
"""
import sys, os
import json
import re
import pipes
from subprocess import Popen, PIPE
import shutil, time
from docopt import docopt
import gnupg
import subprocess
import pexpect
import sqlite3

KEYSPEC = """
%echo Generating an OpenPGP key
Key-Type: {type}
Key-Length: {length}
Subkey-Type: {subtype}
Subkey-Length: {sublength}
Name-Real: {name}
Name-Comment: {comment}
Name-Email: {email}
Expire-Date: {expire}
%commit
%echo Key generated. Done.
"""

KEYRING_DIR="/tmp/k2h.gnupg"
DB = "/usr/local/share/key2myheart/keystore.db"

gpg = gnupg.GPG(homedir=KEYRING_DIR)

def default_spec():
	return KEYSPEC.format(type='RSA',
							length=4096,
							subtype='ELG-E',
							sublength=4096,
							name='Kermit van Frog',
							comment='',
							email='kermit@invalid.tld',
							expire='0',
							pubring='foo.pub',
							secring='foo.sec')

def generate_spec(params):
	return KEYSPEC.format(type=params["type"],
							length=2048,
							subtype=params["subtype"],
							sublength=params["sublength"],
							name=params["name_real"],
							comment=params["comment"],
							email=params["name_email"],
							expire=params["expire"])

def read_stdin():
	""" Read configuration from standard input, expects JSON string """
	istr = ''
	# Read data from STDIN, expect json input
	for line in sys.stdin:
		istr = istr + line

	print istr
	return json.loads(istr)

def check_input(cfgarr, param):
	try:
		cfgarr[param]
	except KeyError as i:
		print "Parameter '{0}' not defined in stdin configuration".format(param)
		sys.exit(1)


def validate_username(uname):
	""" make sure username is a valid string """
	return re.match("^[a-zA-Z0-9]+$", uname)


def shred_keyring(pubkring, seckring):
	""" shred the keyring files """
	for f in (pubkring, seckring):
		os.system("shred -n 10 -u -z -v {0}".format(f))

def generate_keys(cfgarr):
	""" Generate GPG keys using a dynamically generated parameter file. For this purpose
	we use gpg in batch mode: gpg --batch --gen-key
	see man page for further details: https://www.gnupg.org/documentation/manpage.html
	"""
	spec = generate_spec(cfgarr)
	begin = time.time()
	retkey = gpg.gen_key(spec)
	end = time.time()
	if not retkey.primary_created:
		print("(!!!) FAILED TO GENERATE KEY, MOST LIKELY A PERMISSIONS PROBLEM!")
	from pprint import pprint
	pprint(retkey)
	print "generated key with fp: ", retkey.fingerprint, "and keyid", "in", (end-begin), "seconds"
	#pprint(vars(retkey))
	pubkey = gpg.export_keys(retkey.fingerprint)
	seckey = gpg.export_keys(retkey.fingerprint, secret=True)
	keyid  = "0x{0}".format( retkey.fingerprint[-8:] )
	print "keyid: ", keyid

	# insert public key details in keystore
	# with sqlite3.connect(DB) as dbcon:
	# 	cur = dbcon.cursor()
	# 	cur.execute("INSERT INTO keystore(keyid, fingerprint, name, email, pubkey) VALUES(?, ?, ?, ?, ?)", (keyid, retkey.fingerprint, cfgarr["name_real"], cfgarr["name_email"], pubkey))
	# 	dbcon.commit()

	print "exported pubkey: ", pubkey

	return (keyid, retkey.fingerprint, pubkey, seckey, cfgarr["name_real"], cfgarr["name_email"])
	# p = os.popen("gpg --batch --gen-key ", 'w')
	# p.write(spec)
	# #print spec
	# p.close()

def get_generated_key(params):
	""" get key id and fingerprint of generated key """
	os.popen("gpg --primary-keyring {0} --list-keys --no-default-keyring --homedir .".format(params["pubring"]) )

def get_revocation_certificate(keyid):
	print "Using keyring", KEYRING_DIR
	cmd = "gpg --homedir {0} --gen-revoke {1}".format(KEYRING_DIR, keyid)
	print "Command: ", cmd
	px = pexpect.spawn(cmd, timeout=5)

	px.expect("(y/N)")
	px.sendline("y")
	px.expect("Your decision?")
	px.sendline('0')
	px.expect("> ")
	px.sendline("\n")
	px.sendline("\n")
	px.expect("Is this okay?")
	px.sendline("y")

	px.expect(pexpect.EOF)

	# print "before: ", px.before
	# print "buffer: ", px.buffer
	# print "after: ", px.after

	bidx = px.before.index('-----BEGIN PGP PUBLIC KEY BLOCK-----')
	eidx = px.before.index('-----END PGP PUBLIC KEY BLOCK-----')
	eidx += len('-----END PGP PUBLIC KEY BLOCK-----')
	cert = px.before[bidx:eidx]
	print "## certificate"
	print cert
	return cert


def get_last_keyid():
	with sqlite3.connect(DB) as dbcon:
		cur = dbcon.cursor()
		cur.execute("SELECT keyid, created FROM keystore ORDER BY created DESC LIMIT 1")
		data = cur.fetchone()
		return data[0]

def cmd_k2myheart_with_export(name, email, outpath):
	params = {
			"type":"RSA",
			"length":"4096",
			"subtype":"ELG-E",
			"sublength":"4096",
			"name_real" : name,
			"username" : name,
			"comment" : "low security",
			"name_email" : email,
			"expire" : "1y"
		}

	print "Generating identity, this will take a while..."
	(keyid, fp, pubkey, seckey, name, email) = generate_keys( params )

	# save public key
	pathpub  = os.path.join(outpath, "My Encryption Keys/Public Key/{0}-{1}.public.asc".format(email, keyid))
	print "Copying pubkey to", pathpub
	if not os.path.exists(os.path.dirname(pathpub)):
		os.makedirs(os.path.dirname(pathpub))
	with open(pathpub, "w") as fpub:
		fpub.write(pubkey)

	# save private key
	pathsec = os.path.join(outpath, "My Encryption Keys/Secret Key/{0}-{1}.secret.asc".format(email, keyid))
	print "Copying seckey to", pathsec
	if not os.path.exists(os.path.dirname(pathsec)):
		os.makedirs(os.path.dirname(pathsec))
	with open(pathsec, "w") as fsec:
		fsec.write(seckey)

	# get revocation certificate
	revcert = get_revocation_certificate(fp)

	# save revocation certificate
	pathrev  = os.path.join(outpath, "My Encryption Keys/Revocation Key/{0}-{1}.revoke.asc".format(email, keyid))
	print "Copying revcert to", pathrev
	if not os.path.exists(os.path.dirname(pathrev)):
		os.makedirs(os.path.dirname(pathrev))
	with open(pathrev, "w") as frev:
		frev.write(revcert)

	with open("/tmp/revcert.asc", "w") as frev:
		frev.write(revcert)

def main():
	cfg = read_stdin()

	# check and validate input values
	# check_input(cfg, 'username')
	# if not validate_username(cfg['username']):
	# 	print "Illegal username"
	# 	sys.exit(1)

	# get username from config object
	#username = cfg['username']
	generate_keys(cfg)


if __name__ == "__main__":
	#main()
    arguments = docopt(CLII)
    #print(arguments)

    if arguments['k2myheart']:
        cmd_k2myheart_with_export(arguments['--name'], arguments['--email'], arguments['--out'])
