#!/usr/bin/python
# -*- coding: utf-8 -*-
##
## (cc) 2015 Luis Rodil-Fernandez <root@derfunke.net>
## Generate labels from revocation certificates and manage printing queue
##
## To be used by an external orchestration script like:
## $ cat testcert | ./k2h generate --name="John von Neuman" --email=j.von.neumann@cambridge.ac.uk
## $ ./k2h print
##
CLII = """
Tool to print label for the key2myheart installation.

Usage:
  k2h generate --name=<name> --email=<email> [--url=<url>]
  k2h print [--orientation=<lp>] [--pdf=<filename>]
  k2h purge
  k2h -h | --help

Commands:
  generate              Generate label.
  print                 Send label to printing queue.
  purge                 Clear all byproducts.

Options:
  -h --help             Show this screen.
  --name=<name>         Name of key's user.
  --email=<email>       Email address of key.
  --url=<url>           URL to print in third line [default: www.key2myheart.nl].
  --orientation=<lp>    Print mode landscape or portrait [default: landscape].
  --pdf=<filename>      PDF file to print in label [default: label.pdf].
"""
import os, sys
from fpdf import FPDF
import qrcode
from docopt import docopt

LABEL = {
    # DYMO label: landscape, 88x41mm
    'orientation' : 'L',   # P=portrait, L=landscape
    'units' : 'mm',
    #'dimensions' : (41, 88)
    'dimensions' : (54, 101)
}

# for docu see: https://code.google.com/p/pyfpdf/wiki/FPDF
def qrcode_generate(data, saveas="qr_code.png"):
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=5,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)

    img = qr.make_image()
    img.save( saveas )

def pdf_generate(name, email, url="www.key2myheart.nl", pdfname="label.pdf"):
    pdf = FPDF(LABEL['orientation'], LABEL['units'], LABEL['dimensions'])
    pdf.add_page()
    pdf.set_y(2.8)
    #pdf.set_xy(40, 4)

    # place QR code
    pdf.image('qr_code.png', 4, 1, 52)

    x_pos = 88
    # arial bold, 12
    pdf.set_font('Arial', 'B', 9.6)
    # w, h, txt, border, line, align
    pdf.cell(x_pos, 4, name, 0, 1, 'R')

    pdf.set_font('Arial', '', 7)
    pdf.cell(x_pos, 4, email, 0, 1, 'R')

    pdf.ln(6)
    pdf.set_font('Arial', 'U', 9)
    pdf.cell(x_pos, 4, url, 0, 0, 'R')

    # write out
    pdf.output(pdfname,'F')


def cmd_generate(name, email, url):
    """ generate label given certificate """

    # read revocation key from stdin
    istr = ''
    for line in sys.stdin:
        istr = istr + line

    print("Read key from stdin")
    print(istr)

    qrcode_generate(istr)
    pdf_generate(name, email, url)

def cmd_print(orientation='landscape', pdfname='label.pdf'):
    """ send last label to CUPS printing queue """
    os.system( "lpr -o {0} {1}".format(orientation, pdfname) )

def cmd_purge():
    """ delete all byproducts """
    print("Deleting all byproducts...")
    os.system( "rm *.pdf *.png" )

if __name__ == "__main__":
    arguments = docopt(CLII)
    #print(arguments)

    if arguments['generate']:
        cmd_generate(arguments['--name'], arguments['--email'], arguments['--url'] )
    elif arguments['print']:
        # parse orientation string
        orientation = "landscape"
        if arguments['--orientation'] == 'p':
            orientation = "portrait"
        # send to printing queue
        cmd_print(orientation, arguments['--pdf'])
    elif arguments['purge']:
        cmd_purge()
